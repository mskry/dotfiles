
commandline - set or get the current command line buffer

ccoommmmaannddlliinnee [_O_P_T_I_O_N_S] [_C_M_D]

DDEESSCCRRIIPPTTIIOONN
ccoommmmaannddlliinnee can be used to set or get the current contents of the command line buffer.

With no parameters, ccoommmmaannddlliinnee returns the current value of the command line.

With CCMMDD specified, the command line buffer is erased and replaced with the contents of CCMMDD.

The following options are available:

--CC or ----ccuurrssoorr
       Set or get the current cursor position, not the contents of the buffer.  If no argument is given, the current cursor position is
       printed, otherwise the argument is interpreted as the new cursor position.  If one of the options --jj, --pp or --tt is given, the po‐
       sition is relative to the respective substring instead of the entire command line buffer.

--BB or ----sseelleeccttiioonn--ssttaarrtt
       Get current position of the selection start in the buffer.

--EE or ----sseelleeccttiioonn--eenndd
       Get current position of the selection end in the buffer.

--ff or ----ffuunnccttiioonn
       Causes  any  additional  arguments to be interpreted as input functions, and puts them into the queue, so that they will be read
       before any additional actual key presses are.  This option cannot be combined with any other option.  See _b_i_n_d for a list of in‐
       put functions.

--hh or ----hheellpp
       Displays help about using this command.

The following options change the way ccoommmmaannddlliinnee updates the command line buffer:

--aa or ----aappppeenndd
       Do not remove the current commandline, append the specified string at the end of it.

--ii or ----iinnsseerrtt
       Do not remove the current commandline, insert the specified string at the current cursor position

--rr or ----rreeppllaaccee
       Remove the current commandline and replace it with the specified string (default)

The following options change what part of the commandline is printed or updated:

--bb or ----ccuurrrreenntt--bbuuffffeerr
       Select the entire commandline, not including any displayed autosuggestion (default).

--jj or ----ccuurrrreenntt--jjoobb
       Select the current job - a jjoobb here is one pipeline.  Stops at logical operators or terminators (;;, &&, and newlines).

--pp or ----ccuurrrreenntt--pprroocceessss
       Select the current process - a pprroocceessss here is one command.  Stops at logical operators, terminators, and pipes.

--ss or ----ccuurrrreenntt--sseelleeccttiioonn
       Selects the current selection

--tt or ----ccuurrrreenntt--ttookkeenn
       Selects the current token

The following options change the way ccoommmmaannddlliinnee prints the current commandline buffer:

--cc or ----ccuutt--aatt--ccuurrssoorr
       Only print selection up until the current cursor position.  If combined with ----ttookkeenniizzee, this will print up until the last  com‐
       pleted token - excluding the token the cursor is in.  This is typically what you would want for instance in completions.  To get
       both, use both ccoommmmaannddlliinnee ----ccuutt--aatt--ccuurrssoorr ----ttookkeenniizzee;; ccoommmmaannddlliinnee ----ccuutt--aatt--ccuurrssoorr ----ccuurrrreenntt--ttookkeenn, or ccoommmmaannddlliinnee --ccoo;; ccoommmmaanndd‐‐
       lliinnee --cctt for short.

--oo or ----ttookkeenniizzee
       Tokenize the selection and print one string-type token per line.

If  ccoommmmaannddlliinnee  is  called  during a call to complete a given string using ccoommpplleettee --CC SSTTRRIINNGG, ccoommmmaannddlliinnee will consider the specified
string to be the current contents of the command line.

The following options output metadata about the commandline state:

--LL or ----lliinnee
       Print the line that the cursor is on, with the topmost line starting at 1.

--SS or ----sseeaarrcchh--mmooddee
       Evaluates to true if the commandline is performing a history search.

--PP or ----ppaaggiinngg--mmooddee
       Evaluates to true if the commandline is showing pager contents, such as tab completions.

----ppaaggiinngg--ffuullll--mmooddee
       Evaluates to true if the commandline is showing pager contents, such as tab completions and all lines are shown  (no  "<n>  more
       rows" message).

----iiss--vvaalliidd
       Returns  true  when  the  commandline is syntactically valid and complete.  If it is, it would be executed when the eexxeeccuuttee bind
       function is called.  If the commandline is incomplete, return 2, if erroneus, return 1.

EEXXAAMMPPLLEE
ccoommmmaannddlliinnee --jj $$hhiissttoorryy[[33]] replaces the job under the cursor with the third item from the command line history.

If the commandline contains

   >_ echo $flounder >&2 | less; and echo $catfish

(with the cursor on the "o" of "flounder")

The eecchhoo $$fflloouunnddeerr >>&& is the first process, lleessss the second and aanndd eecchhoo $$ccaattffiisshh the third.

eecchhoo $$fflloouunnddeerr >>&&22 || lleessss is the first job, aanndd eecchhoo $$ccaattffiisshh the second.

$$fflloouunnddeerr is the current token.

The most common use for something like completions is

   set -l tokens (commandline -opc)

which gives the current _p_r_o_c_e_s_s (what is being completed), tokenized into separate entries, up to but  excluding  the  currently  being
completed token

If you are then also interested in the in-progress token, add

::::     set -l current (commandline -ct)

Note  that this makes it easy to render fish's infix matching moot - if possible it's best if the completions just print all possibili‐
ties and leave the matching to the current token up to fish's logic.

More examples:

   >_ commandline -t
   $flounder
   >_ commandline -ct
   $fl
   >_ commandline -b # or just commandline
   echo $flounder >&2 | less; and echo $catfish
   >_ commandline -p
   echo $flounder >&2
   >_ commandline -j
   echo $flounder >&2 | less
